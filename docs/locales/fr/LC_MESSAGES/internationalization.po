# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Reginald Maltais
# This file is distributed under the same license as the NDVI Calculator
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: NDVI Calculator \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-29 16:46-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../internationalization.rst:2
msgid "Internationalization"
msgstr ""

#: ../../internationalization.rst:4
msgid ""
"Sphinx is already set up for localization (l10n) and internationalization"
" (i18n) in the interface, so when you generate outputs for either French "
"or English all the UI components will be translated for you "
"automatically. All you have to worry about is your own content."
msgstr ""

#: ../../internationalization.rst:8
msgid ""
"Internally, Sphinx uses the **gettext** open standard for providing l10n "
"and i18n. This means you write your documents in a defined source "
"language, then generate message files that can be translated. All of "
"these files are basic text documents, and work well with revision "
"control. This lets you include them in your integration pipelines, and "
"create a new deployment every time the documentation is updated."
msgstr ""

#: ../../internationalization.rst:14
msgid "Required components"
msgstr ""

#: ../../internationalization.rst:16
msgid "The ``sphinx-intl`` package is used to generate i18n message files::"
msgstr ""

#: ../../internationalization.rst:20
msgid ""
"The basic configuration was done for you when using ``sphinx-"
"quickstart``. These values should already be in your `conf.py` file::"
msgstr ""

#: ../../internationalization.rst:27
msgid "Prepare for translation"
msgstr ""

#: ../../internationalization.rst:29
msgid ""
"The source text is converted to translation templates through the help of"
" a ``make`` command::"
msgstr ""

#: ../../internationalization.rst:33
msgid "The templates end up in ``_build/gettext``, if you want to look at them."
msgstr ""

#: ../../internationalization.rst:36
msgid "Generate message files"
msgstr ""

#: ../../internationalization.rst:38
msgid ""
"The files that actually get translated are ``.po`` files. You will end up"
" with a ``.po`` file for each of the source files, which are generated "
"from the templates created in the last section."
msgstr ""

#: ../../internationalization.rst:41
msgid "Generate po files."
msgstr ""

#: ../../internationalization.rst:43
msgid "Weâ€™ll use the pot files generated in the above step::"
msgstr ""

#: ../../internationalization.rst:47
msgid ""
"You can specify multiple languages by supplying more ``-l`` switches to "
"build multiple languages at once."
msgstr ""

#: ../../internationalization.rst:49
msgid ""
"Once completed, the generated po files will be placed in the below "
"directories::"
msgstr ""

#: ../../internationalization.rst:54
msgid "Translate text"
msgstr ""

#: ../../internationalization.rst:56
msgid ""
"As noted above, these are located in the ``./locale/<lang>/LC_MESSAGES`` "
"directory. Each paragraph of text in the source document is set as a "
"``msgid``, and the translated text is assigned to the ``msgstr`` value::"
msgstr ""

#: ../../internationalization.rst:62
msgid ""
"Use your favourite text editor to update the ``.po`` files. The "
"``msgstr`` values are valid markup, so you can continue to use the "
"appropriate ``rst`` commands."
msgstr ""

#: ../../internationalization.rst:65
msgid ""
"Images with localized text can be name according to their language, so "
"``myfigure.png`` would have ``myfigure.fr.png`` as the localized image. "
"How to detect translated images is handled through "
"``figure_language_filename`` in ``conf.py``."
msgstr ""

#: ../../internationalization.rst:69
msgid "Build translated outputs"
msgstr ""

#: ../../internationalization.rst:71
msgid ""
"When you build oututs it will look up the value of the language parameter"
" in ``conf.py`` or you may also specify the parameter on the command "
"line. Since your source language is set in ``conf.py``, you select the "
"target language on the command line::"
msgstr ""

#: ../../internationalization.rst:77
msgid ""
"You will find the translated documents in the ``_build/html`` directory, "
"ready to be published. Any images with the appropriate translation will "
"be used automatically, otherwise the original is used."
msgstr ""

#: ../../internationalization.rst:81
msgid "Updating translations when text changes"
msgstr ""

#: ../../internationalization.rst:83
msgid ""
"When your documentation changes it will be necessary to build new "
"``.pot`` and ``.po`` files. Building `.pot` files is the same process as "
"earlier::"
msgstr ""

#: ../../internationalization.rst:88
msgid ""
"``sphinx-intl`` is able to tell what has changed in the translations, and"
" so will be able to merge the already changed text with the new "
"modifications::"
msgstr ""

#: ../../internationalization.rst:93
msgid "You can now translate the new text and rebuild the outputs as above."
msgstr ""

